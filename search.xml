<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Native ECMAScript modules</title>
      <link href="/2019/05/19/Native-ECMAScript-modules/"/>
      <url>/2019/05/19/Native-ECMAScript-modules/</url>
      
        <content type="html"><![CDATA[<p>JS modules 是从 ES6 开始引入的模块系统。由于历史原因，我们借助 babel 等编译工具才能提前使用这些特性。<br>好消息是，越来越多的主流浏览器开始支持 ES modules。 到目前为止，大部分主流浏览器都已经支持了原生 JavaScript modules，这意味着我们可以不用打包编译就可以使用 JavaScript modules。</p><p><img src="https://pic1.zhimg.com/v2-adf5f710b752c732b04a93cf1d5b58e9.png" alt="浏览器" title="浏览器"></p><h3 id="JS-模块化"><a href="#JS-模块化" class="headerlink" title="JS 模块化"></a>JS 模块化</h3><p>在 JS 发展的历程中，诞生过很多模块化方案，例如 CommonJS, AMD, CMD 等，但没有一个统一的规范。ES6 Modules 的出现，将模块语法统一起来。<br>在 JS modules 中，可以使用 export 和 import 导出导入模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// hello.js</span><br><span class="line">export default function() &#123;</span><br><span class="line">  console.log(&apos;hello world!&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import sayHello from &apos;./hello/js&apos;</span><br><span class="line">sayHello()</span><br></pre></td></tr></table></figure><h3 id="JS-modules-和传统-Javascript-的区别"><a href="#JS-modules-和传统-Javascript-的区别" class="headerlink" title="JS modules 和传统 Javascript 的区别"></a>JS modules 和传统 Javascript 的区别</h3><ol><li>默认开启严格模式</li><li>不支持HTML风格的注释 （&lt;!–注释 –&gt;）</li><li>每个模块都有自己的作用域</li><li>import export 仅在 JS modules 中使用，传统脚本不能使用</li></ol><p>如何在浏览器中使用 JS modules 呢？只需在 script 标签上加上 type=”module”, 浏览器就会自动识别 JS modules。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot; src = &quot;main.js&quot;&gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// hello.js</span><br><span class="line">export function sayHello() &#123;</span><br><span class="line">  console.log(&apos;hello world!&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// inline</span><br><span class="line">&lt;script type=&quot;module&quot;&gt;</span><br><span class="line">import &#123;sayHello&#125; from &apos;./hello.js</span><br><span class="line">sayHello()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：.js 后缀不能省略</p><h3 id="import-引入路径支持还不完善"><a href="#import-引入路径支持还不完善" class="headerlink" title="import 引入路径支持还不完善"></a>import 引入路径支持还不完善</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 支持</span><br><span class="line">import &#123;sayHello&#125; from &apos;./hello.js&apos;;</span><br><span class="line">import &#123;sayHello&#125; from &apos;../hello.js&apos;;</span><br><span class="line">import &#123;sayHello&#125; from &apos;/modules/hello.js&apos;;</span><br><span class="line">import &#123;sayHello&#125; from &apos;https://zhihu.com/modules/hello.js&apos;;</span><br><span class="line"></span><br><span class="line">// 不支持</span><br><span class="line">import &#123;sayHello&#125; from &apos;hello.js&apos;;</span><br><span class="line">import &#123;sayHello&#125; from &apos;hello.js&apos;;</span><br><span class="line">import &#123;sayHello&#125; from &apos;modules/hello.js&apos;;</span><br></pre></td></tr></table></figure><h3 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h3><p>nomodule 属性是为兼容不支持 JS modules 的浏览器， 兼容 JS modules 的浏览器不会执行加了 nomodule 属性的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot; src = &quot;main.js&quot;&gt; &lt;/script&gt;</span><br><span class="line">&lt;script nomodule src=&quot;fallback.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><p>对于带有 type=”module” 的 script， 不论是外部脚本还是内联脚本， 浏览器都会异步加载，不会堵塞浏览器渲染。说到异步加载，有两个属性不得不提。defer 和 async。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;main.js&quot; defer&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;main.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>scrip 标签加了 defer 或 async 属性，脚本就会异步加载。传统 JS 中，这两个属性只用于外部脚本，不能用于内联脚本。 两者的区别是，defer 会等到整个页面渲染结束才会执行，async 是脚本加载完成就执行。</p><p><img src="https://pic2.zhimg.com/v2-08e1410a38347a1cb79412972798e80b.png" alt="浏览器" title="浏览器"></p><p>JS modules 默认加载行为类似 defer script，也可以使用 async 属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot; src=&quot;foo.js&quot;&gt; &lt;/script&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;foo.js&quot; defer&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只要加载完毕，脚本立即执行 --&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;foo.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>浏览器可以预加载，甚至可以预解析，预编译模块及其依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;modulepreload&quot; href=&quot;main.js&quot;&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="加载过程中的差异"><a href="#加载过程中的差异" class="headerlink" title="加载过程中的差异"></a>加载过程中的差异</h3><ol><li>JS modules 只执行一次</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- main.js 执行多次 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;module.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;module.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- module.js 只执行一次--&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>JS modules 及其依赖必须处理跨域问题。<br>传统 JS 中引入其他域的脚本文件是没有跨域问题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 通过跨域验证，这段脚本才会执行 --&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; src=&quot;https://zhihu.com/modules/hello.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>传统的 script 标签只能在加载外部脚本文件的时候加上 async, 在内联 script 标签加 async 不会生效，但在 JS modules 内联 script 标签上加 async 会生效。</li></ol><h3 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot;&gt;</span><br><span class="line">  (async () =&gt; &#123;</span><br><span class="line">    const sayHello = await import(&apos;./hello.js&apos;);</span><br><span class="line">    sayHello()</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>只能使用 import，如果一个模块引入几十个包，不借助构建工具，很难做 tree shaking。</p><p>HTTP2 的 server push 特性，还不能很好的在高度模块化应用使用，web 服务器和浏览器目前也没有针对这种情况进行优化。</p><p>参考：<br><a href="https://jakearchibald.com/2017/es-modules-in-browsers/" target="_blank" rel="noopener">https://jakearchibald.com/2017/es-modules-in-browsers/</a><br><a href="https://hospodarets.com/native-ecmascript-modules-the-first-overview#nodejs-way-to-mark-the-file-as-a-module" target="_blank" rel="noopener">https://hospodarets.com/native-ecmascript-modules-the-first-overview#nodejs-way-to-mark-the-file-as-a-module</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React 事件机制</title>
      <link href="/2019/05/15/React-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/05/15/React-%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pre 标签文字换行解决方案</title>
      <link href="/2019/02/18/pre-%E6%A0%87%E7%AD%BE%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/02/18/pre-%E6%A0%87%E7%AD%BE%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>大家经常遇到这种情况，当一行文字里包含英文字母或数字时会出现不换行局面，一般用 word-wrap:break-word 强制换行就能解决该问题。</p><p>但有时候后端返回的数据包含 &lt;pre> 标签的时候，用 word-wrap:break-word 换行是没有效果的。</p><p>简单的说就是 &lt;pre> 标签文字无法用 word-wrap:break-word 换行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  pre &#123;</span><br><span class="line">    display: block; </span><br><span class="line">    width: 200px; </span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">  &#125;  </span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;hexohexohexohexohexohexohexohexohexohexohexohexohexohexohexo&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p><img src="https://ju-da-ren.wang/images/pre.png" alt="pre" title="pre"></p><p>解决方法：用 white-space:pre-line 或者 white-space:pre-wrap 就可以轻松解决。</p>]]></content>
      
      
      <categories>
          
          <category> web 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客是怎样炼成的？</title>
      <link href="/2019/02/18/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84%EF%BC%9F/"/>
      <url>/2019/02/18/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>最近忙里偷闲整了个新博客，原来的博客源码找不到了，也没怎么写东西，就重新开发了一个，其实平时不太喜欢写东西，但感觉记录一下平时之所学还是很有益处的。下面介绍一下自己的建站流程。</p><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p> Hexo + GitHub</p><p> Hexo 是一款基于 Node.js 的静态博客框架，快速简洁，插件丰富，并且支持 Markdown,开发也很简单，可以生成静态网页托管到 GitHub 或 Heroku 上，我选用的是 GitHub。</p><h3 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h3><p>可以在阿里云或腾讯云上申请你的个性域名，使用 GitHub 托管网站，不需要备案，因为托管我们网站的服务器在美国，而且国内备案流程比较繁杂，省去了备案流程也节省了时间。</p><h3 id="GitHub-创建个人仓库"><a href="#GitHub-创建个人仓库" class="headerlink" title="GitHub 创建个人仓库"></a>GitHub 创建个人仓库</h3><p>登录 GitHub 账号，然后创建新仓库，仓库名应该为：用户名.github.io，这是固定写法，比如我的仓库名是 summerwang0915.github.io。</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>首先安装 Hexo 命令行工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后初始化我们的博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><p>为了查看我们的博客雏形，本地启动博客，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>完成后访问 localhost:4000 即可看到我们博客啦。</p><h3 id="自定义博客"><a href="#自定义博客" class="headerlink" title="自定义博客"></a>自定义博客</h3><p>选择一个喜欢的主题，我选择的是 <a href="https://github.com/sabrinaluo/hexo-theme-replica" target="_blank" rel="noopener">hexo-theme-replica</a>。这个主题是 GitHub 风格的，我稍加修改了下，改成了自己喜欢的样子。</p><p>在 _config.yml 文件里修改主题的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: hexo-theme-replica</span><br></pre></td></tr></table></figure><p>也可以修改博客的基本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 橘大人的 Blog</span><br><span class="line">subtitle:</span><br><span class="line">description: 写代码要跟写书法一样写一辈子，喵～</span><br></pre></td></tr></table></figure><p>然后可以修改主题的样式和功能，最后得到你想要的博客的样子。</p><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><p>链接 GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:summerwang0915/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>分别执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>这三条命令是部署网站的命令：<br>hexo g 是 hexo generate 的缩写，用来生成静态文件（public）。<br>hexo d 是 hexo deploy的缩写，用来将生成的静态文件部署到 GitHub 上。<br>hexo clean 用来清除缓存文件和已生成的静态文件。在某些情况下，如果发现对站点的修改不生效，可能需要该命令。</p><p>部署完成后，略等几秒后，访问网站地址，即 xxxx.github.io，你会发现博客已经在线上能访问了。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>如果你想使用个性化域名，则需要在域名代理厂商那里申请。我申请的是腾讯云的域名。域名申请完毕后，进入代腾讯云管理控制台的域名列表，进行解析。</p><p><img src="https://ju-da-ren.wang/images/yuming.png" alt="域名" title="域名"><br><img src="https://ju-da-ren.wang/images/jiexi.png" alt="域名解析" title="域名解析"></p><p>添加两条解析记录,有的时候访问可能会加上 www，其中 185.199.108.153 是 ping 你的 xxxx.github.io 的获得的ip地址。</p><p>最后在 source 文件夹下创建 CNAME 文件，把域名填进去。推送到 GitHub 上后，CNAME 文件会显示在根目录下。</p><p><img src="https://ju-da-ren.wang/images/cname.png" alt="CNAME" title="CNAME"><br><img src="https://ju-da-ren.wang/images/cname2.png" alt="CNAME" title="CNAME"></p><h4 id="大功告成，在浏览器输入你的个性化域名就可以访问你的博客啦。"><a href="#大功告成，在浏览器输入你的个性化域名就可以访问你的博客啦。" class="headerlink" title="大功告成，在浏览器输入你的个性化域名就可以访问你的博客啦。"></a>大功告成，在浏览器输入你的个性化域名就可以访问你的博客啦。</h4>]]></content>
      
      
      <categories>
          
          <category> web 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
